(IT21198168 Weerasekara N.P.)

//GuestUser.h
#include "Vacancy.h"
class GuestUser
{
protected:
	int userID;
	char userName[20];
	char userAddress[30];
	char userEmail[30];
	char userphoneNumber[10];
public:
	GuestUser();
	GuestUser(int puserid, const char puserName[], const char
		puserAddress[], const char puserEmail[], const char puserPHno[]);
	void searchVacancies(Vacancy* pVac);
	void registerUser();
	virtual void displayDetails();
	~GuestUser();
};

//RegisteredUser.h

#include"GuestUser.h"
class RegisteredUser :public GuestUser
{
protected:
	char userUsername[10];
	char userPassword[10];
public:
	RegisteredUser();
	RegisteredUser(const char puserUsername[], const char
		puserPassword[], int puserid, const char puserName[], const char
		puserAddress[], const char puserEmail[], const char pusertNo[]);
	virtual void displayDetails();
	void login();
	void logout();
	char checkLoginDetails();
	~RegisteredUser();

//Jobseeker.h

#include "Application.h"
#include "Vacancy.h"
#include "RegisteredUser.h"
#define SIZE 2
#define SIZE 5
class Jobseeker :public RegisteredUser
{
private:
	int noOfVacancies;
	Vacancy* applyVac[SIZE];
	application* apply[SIZE];
public:
	Jobseeker();
	Jobseeker(const char usName[], const char usPwd[], int id, const
		char name[], const char address[], const char email[], const char
		telno[], int pnoOfVacancies, int apply1, int apply2);
	void addApplyingJob(Vacancy* papplyVac);
	void login();
	void displayDetails();
	~Jobseeker();
};


//GuestUser.cpp

#include "GuestUser.h"
#include <cstring>
GuestUser::GuestUser()
{
	userID = 0;
	strcpy(userName, "");
	strcpy(userAddress, "");
	strcpy(userEmail, "");
	strcpy(userphoneNumber, "0000000000");
}
GuestUser::GuestUser(int puserid, const char puserName[], const char
	puserAddress[], const char puserEmail[], const char userPHno[])
{
	userID = puserid;
	strcpy(userName, puserName);
	strcpy(userAddress, puserAddress);
	strcpy(userEmail, puserEmail);
	strcpy(userphoneNumber, userPHno);
}
void GuestUser::searchVacancies(Vacancy* pVac)
{
}
void GuestUser::registerUser()
{
}
void GuestUser::displayDetails()
{
}
GuestUser::~GuestUser()
{
	//Destructor 
}








//RegisteredUser.cpp


#include "RegisteredUser.h"
#include <cstring>
RegisteredUser::RegisteredUser()
{
	strcpy(userUsername, "");
	strcpy(userPassword, "");
}
RegisteredUser::RegisteredUser(const char puserUsername[],
	const char puserPassword[], int puserid, const char puserName[],
	const char puserAddress[], const char puserEmail[], const char
	puserNo[]) : GuestUser(puserid, puserName, puserAddress, puserEmail,
		puserNo)
{
	strcpy(userUsername, puserUsername);
	strcpy(userPassword, puserPassword);
}
void RegisteredUser::displayDetails()
{
}
void RegisteredUser::login()
{
}
void RegisteredUser::logout()
{
}
char RegisteredUser::checkLoginDetails()
{
}	
RegisteredUser::~RegisteredUser()
{
	//Destructor 
}
















//Jobseeker.cpp





#include "Jobseeker.h"
#define SIZE 2
Jobseeker::Jobseeker()
{
	noOfVacancies = 0;
}
Jobseeker::Jobseeker(const char usName[], const char usPwd[], int id,
	const char name[], const char address[], const char email[], const
	char telno[], int pnoOfVacancies, int apply1, int apply2) :RegisteredUser(usName,
		usPwd, id, name, address, email, telno)
{
	apply[0] = new applying(apply1);
	apply[1] = new applying(apply2);
}
{
	noOfVacancies = pnoOfVacancies;
}
void Jobseeker::addApplingVacancy(Vacancy* papplyVac)
{
	if (noOfVacancies < SIZE)
	{
		applyVac[noOfVacancies] = papplyVac;
		noOfVacancies++;
	}
}
void Jobseeker::login()
{
}
void Jobseeker::displayJobseekerDetails()
{
}
Jobseeker::~Jobseeker()
{
	//Destructor 
}

//Main.cpp
#include "GuestUser.h"
#include "RegisteredUser.h"
#include "Jobseeker.h"
#include "Application.h"
#include "Vacancy.h"

#include <iostream>
using namespace std;
int main()
{
	//---- Object creation ------
	GuestUser* rg = new RegisteredUser(); // Object -RegisteredUser class
    RegisteredUser* jobseeker = new Jobseeker(); // Object - jobseeker class

	//----Method Calling------
	rg->login();
	rg->displayDetails();

	jobseeker->login();
	jobseeker->displayJobseekerDetails();

	//----Delete Dynamic objects------
	delete rg;
	delete jobseeker;
	return 0;
}

